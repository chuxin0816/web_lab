注意事项
代码中不要出现反引号
注意打印和显示的格式，半角符号且无空格
实验目标
通过 JavaScript 实现一个交互式的列表项拖拽排序功能，考察学生对拖拽事件（Drag and Drop API）和 DOM 操作的掌握，包括事件监听器的使用、拖拽处理逻辑以及 DOM 元素的动态更新。
实验要求
拖拽排序功能
用户可以拖拽列表项改变其顺序。
拖拽过程中，实时高亮显示目标位置。
拖拽完成后，更新列表项的顺序，并在页面上动态显示新的顺序。
重置排序功能
设置一个“重置顺序”按钮，点击后将列表恢复到初始状态。
排序结果显示
在页面上动态显示当前的排序结果，例如“当前顺序=1,2,3,4”。
控制台日志输出
每次拖拽排序完成或点击重置按钮时，在控制台输出相应日志，格式为：
“列表已更新=1,2,3,4”
“列表已重置=初始顺序”。
实验步骤
初始化变量和选择元素
目标：获取页面中的所有列表项元素、排序显示区域和重置按钮，并初始化拖拽相关变量。
步骤：
使用 document.getElementById('sortable-list') 获取所有列表项
元素，并保存在 list 变量中。
使用 document.getElementById() 获取显示当前顺序的
元素，保存在 orderDisplay 变量中。

获取并保存重置按钮元素，保存在 resetButton 变量中。
初始化一个数组 originalOrder，保存列表的初始顺序（ [1,2,3,4]）。
实现拖拽开始功能
目标：当用户开始拖拽列表项时，记录拖拽的目标项，并设置拖拽数据。
步骤：
为每个列表项添加 dragstart 事件监听器。
在事件处理函数中：
添加一个 dragging 样式类，标记拖拽项。
实现拖拽经过的高亮显示功能
目标：当用户将拖拽项移至其他列表项上时，高亮显示目标位置。
步骤：
为每个列表项添加 dragover 事件监听器。
在事件处理函数中：
阻止默认行为（event.preventDefault()），允许放置操作。
添加 hover 样式类，标记目标位置。
实现拖拽放置功能
目标：当用户放置拖拽项时，更新列表顺序，并移除高亮样式。
步骤：
为每个列表项添加 drop 事件监听器。
在事件处理函数中：
获取拖拽项的索引和目标项的索引。
更新 DOM，重新排列列表项顺序。
移除 hover 和 dragging 样式类。
调用 updateOrderDisplay() 函数更新当前顺序的显示。
在控制台打印新顺序console.log("列表已更新=" + 更新后的顺序)。
实现拖拽结束功能
目标：当拖拽操作结束时，移除拖拽相关的临时样式。
步骤：
为每个列表项添加 dragend 事件监听器。
在事件处理函数中，移除 dragging 样式类。
实现重置排序功能
目标：当点击重置按钮时，将列表恢复到初始顺序。
步骤：
为重置按钮添加 click 事件监听器。
在事件处理函数中：
使用 originalOrder 重新渲染列表项。
调用 updateOrderDisplay() 函数更新显示顺序。
在控制台打印重置日志console.log("列表已重置=" + originalOrder)。
实现辅助函数
updateOrderDisplay 函数
目标：更新页面上显示的当前列表顺序。
步骤：
遍历当前 DOM 中的列表项，获取它们的顺序编号。
更新
元素的文本内容，显示格式为 “当前顺序=1,2,3,4”。

resetList 函数
目标：将列表恢复为初始状态。
步骤：
遍历 originalOrder 数组，根据其内容重新生成列表项并更新 DOM。