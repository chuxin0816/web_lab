输入限制
姓名输入框
允许内容：仅中文、英文和空格字符。
禁止内容：特殊字符（如 <script> 等）、数字。
输入校验：
实时校验，输入非法字符时自动清除。
姓名不能为空，否则提示“姓名不能为空！”。
电话号码输入框
允许内容：仅数字（0-9）。
禁止内容：字母、特殊字符、空格等。
输入校验：
实时校验，输入非法字符时自动清除。
电话号码不能为空，否则提示“电话号码不能为空！”。
非法输入处理
添加或查询操作中若检测到非法字符（如 <script> 或 JS 代码），提示用户并拒绝操作。
确保通讯录中不保存任何非法字符。
功能行为及输出
添加联系人
输入合法：成功将联系人添加到通讯录。注意内容格式：name + ' - ' + phone + 删除按钮
输入非法：
提示“姓名不能为空”或“电话号码不能为空”。
添加重复号码：
弹窗提示“该号码已存在，是否覆盖？”。
用户选择“确定”覆盖，显示“联系人已更新！”。
用户选择“取消”，不执行操作。
查询联系人
输入为空：查询全部联系人。
输入部分匹配：返回匹配结果。
查询不到：显示“未找到匹配的联系人。”。
删除联系人
删除按钮要求：每个联系人列表项必须包含 class="delete-btn" 的删除按钮。
点击联系人列表项中的删除按钮，成功删除后从列表中移除。
若联系人不存在或操作异常，提示“删除联系人失败”。
重置输入框
点击“重置”按钮，清空姓名和电话号码输入框内容。
保持页面其他状态不变。
数据持久化
所有联系人数据存储在浏览器的 IndexedDB 中。
数据库名称必须为 contactsDB，对象仓库（Object Store）名称必须为 contacts。
页面刷新后，通讯录仍显示原有数据。
界面布局检查
页面必须包含以下关键元素：
姓名输入框（id="name"）
电话号码输入框（id="phone"）
通讯录展示区域（id="content"）
操作按钮（添加、查询、重置，type="button"）。
联系人列表项（<li>）必须包含 class="delete-btn" 的删除按钮。
IndexedDB 实验步骤
1. 初始化 IndexedDB
创建数据库和对象仓库：
创建名为 contactsDB 的 IndexedDB 数据库。
在数据库版本升级时，定义对象仓库 contacts，设置 phone 为主键。
打开数据库连接：
使用 indexedDB.open() 方法打开数据库。
监听 onupgradeneeded 事件完成对象仓库的初始化。
定义事务：每次进行数据库操作（如添加、查询、删除）时，创建只读或读写事务以保证数据一致性。
2. 添加联系人
获取输入内容：读取页面中姓名和电话号码的输入框内容，进行非法字符校验（仅允许中文、英文和数字）。
检查重复号码：
查询 contacts 对象仓库，判断电话号码是否已存在。
如果号码存在，提示用户选择覆盖或取消。
插入或更新数据：
使用 add() 方法插入新的联系人。
使用 put() 方法更新已存在的联系人。
添加成功后，弹窗提示“联系人已添加”或“联系人已更新”。
3. 查询联系人
获取查询条件：从输入框中读取姓名或电话号码，支持部分匹配。
执行查询操作：
打开只读事务，通过游标 (openCursor) 遍历 contacts 对象仓库。
匹配输入的部分内容（indexOf 方法），将匹配结果存储到数组。
更新页面显示：
如果有匹配结果，将联系人列表更新到页面中。
如果未匹配到联系人，显示“未找到匹配的联系人”。
4. 删除联系人
监听删除按钮点击事件：
在每个联系人列表项中添加 class="delete-btn" 的按钮。
点击删除按钮时，获取对应联系人的电话号码。
执行删除操作：
打开读写事务，调用 delete() 方法，从 contacts 对象仓库中删除对应联系人。
删除成功后，移除页面中对应的列表项。
错误处理：如果删除操作异常，弹窗提示“删除联系人失败”。
5. 重置输入框
监听重置按钮事件：点击“重置”按钮时，清空姓名和电话号码输入框的内容。
更新页面状态：保持通讯录列表和数据不变，仅重置输入框。
6. 页面加载时显示数据
加载页面时读取数据库：
打开只读事务，通过游标遍历 contacts 对象仓库，读取所有联系人信息。
初始化列表显示：
如果数据库中有数据，将所有联系人显示在页面中。
如果数据库为空，显示“通讯录为空，请添加联系人”。
7. 数据校验和安全处理
实时输入校验：对姓名和电话号码输入框绑定 oninput 事件，移除非法字符。
防止 XSS 攻击：使用 textContent 或转义方法显示用户输入内容，避免脚本注入风险。
异常捕获：所有 IndexedDB 操作均需捕获异常，提示用户错误信息并终止操作。